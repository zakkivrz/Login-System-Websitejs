{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/context/AuthContext.tsx"],"sourcesContent":["'use client';\nimport React, { createContext, useState, useContext, ReactNode } from 'react';\n\ninterface User {\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  // Simulated users storage - replace with real database in production\n  const [users, setUsers] = useState<{ email: string; password: string }[]>([]);\n\n  const register = async (email: string, password: string) => {\n    if (!email || !password) {\n      throw new Error(\"Email and Password are required.\");\n    }\n    \n    // Check if user already exists\n    if (users.some(user => user.email === email)) {\n      throw new Error(\"User already exists with this email.\");\n    }\n\n    // Store new user\n    setUsers([...users, { email, password }]);\n    setUser({ email });\n  };\n\n  const login = async (email: string, password: string) => {\n    if (!email || !password) {\n      throw new Error(\"Email and Password are required.\");\n    }\n\n    // Check if user exists and password matches\n    const user = users.find(u => u.email === email && u.password === password);\n    if (!user) {\n      throw new Error(\"Invalid email or password.\");\n    }\n\n    setUser({ email });\n  };\n\n  const logout = () => {\n    setUser(null);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n};\n"],"names":[],"mappings":";;;;;AACA;;;AADA;;AAcA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,eAAe,CAAC,EAAE,QAAQ,EAA2B;;IAChE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAE9C,qEAAqE;IACrE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAyC,EAAE;IAE5E,MAAM,WAAW,OAAO,OAAe;QACrC,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,MAAM,IAAI,MAAM;QAClB;QAEA,+BAA+B;QAC/B,IAAI,MAAM,IAAI,CAAC,CAAA,OAAQ,KAAK,KAAK,KAAK,QAAQ;YAC5C,MAAM,IAAI,MAAM;QAClB;QAEA,iBAAiB;QACjB,SAAS;eAAI;YAAO;gBAAE;gBAAO;YAAS;SAAE;QACxC,QAAQ;YAAE;QAAM;IAClB;IAEA,MAAM,QAAQ,OAAO,OAAe;QAClC,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,MAAM,IAAI,MAAM;QAClB;QAEA,4CAA4C;QAC5C,MAAM,OAAO,MAAM,IAAI,CAAC,CAAA,IAAK,EAAE,KAAK,KAAK,SAAS,EAAE,QAAQ,KAAK;QACjE,IAAI,CAAC,MAAM;YACT,MAAM,IAAI,MAAM;QAClB;QAEA,QAAQ;YAAE;QAAM;IAClB;IAEA,MAAM,SAAS;QACb,QAAQ;IACV;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAO;YAAU;QAAO;kBAC1D;;;;;;AAGP;GA5Ca;KAAA;AA8CN,MAAM,UAAU;;IACrB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANa","debugId":null}}]
}